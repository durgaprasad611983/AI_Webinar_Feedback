# -*- coding: utf-8 -*-
"""AI Webinar Feedback Dashboard.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1MbXlawfLEssUhrJD3oyZb1nGKvhWoJAL
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from collections import Counter
from PIL import Image

# Load the data
csv_path = "https://github.com/durgaprasad611983/AI_Webinar_Feedback/Webinar_Feedbacks.csv"
df = pd.read_csv(csv_path)

# Page config
st.set_page_config(page_title="Zenthic AI Webinar Feedback Dashboard", layout="wide")

# Host section with photo
st.markdown("""
    <style>
    .title-box {
        background-color: #48CAE4;
        padding: 30px;
        border: 2px solid #6c757d;
        border-radius: 10px;
        text-align: center;
        font-size: 28px;
        font-weight: bold;
        color: #000000;
        margin-bottom: 30px;
        box-shadow: 2px 2px 10px rgba(0,0,0,0.1);
        width: 100%;
        max-width: 100%;
        margin-left: auto;
        margin-right: auto;
    }
    .host-box {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 12px;
        padding: 20px;
        display: flex;
        gap: 20px;
        align-items: center;
        box-shadow: 2px 2px 10px rgba(0,0,0,0.05);
        margin-bottom: 30px;
    }
    .host-text {
        font-size: 18px;
        line-height: 1.6;
        color: #212529;
    }
    .host-highlight {
        font-weight: bold;
        color: #2C7BE5;
    }
    </style>
    <div class="title-box">
        üß† Zenthic AI Webinar Feedback Dashboard
    </div>
""", unsafe_allow_html=True)

# Host Section with Photo and Rich Text Box
col1, col2 = st.columns([1, 3])
with col1:
    st.image("https://github.com/durgaprasad611983/AI_Webinar_Feedback/Photograph_5.jpg", caption="Durga Prasad", width=150)
with col2:
    st.markdown(" ")
    st.markdown(" ")
    st.markdown(" ")
    st.markdown("""
        <div class="host-box">
            <div class="host-text">
                <div><span class="host-highlight">Hosted by:</span> Durga Prasad</div>
                <div><span class="host-highlight">Role:</span> AI Architect, Zenthic AI</div>
                <div><span class="host-highlight">Analyzing feedback from the session: </span> Real-World Impact of Core AI in Industries</div>   
            </div>
        </div>
    """, unsafe_allow_html=True)

st.markdown("---")

def render_styled_table(df):
    st.markdown("""
        <style>
            .styled-table {
                border-collapse: collapse;
                margin: 25px 0;
                font-size: 0.9em;
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                width: 100%;
                border: 1px solid #ddd;
            }
            .styled-table th, .styled-table td {
                padding: 12px 15px;
                border: 1px solid #ddd;
                text-align: center;
            }
            .styled-table thead {
                background-color: #009879;
                color: #ffffff;
            }
            .styled-table tbody tr:nth-child(even) {
                background-color: #f3f3f3;
            }
        </style>
    """, unsafe_allow_html=True)

    html_table = df.to_html(index=False, classes="styled-table")
    st.markdown(html_table, unsafe_allow_html=True)

# Insights Section
st.markdown(
    """
    <div style='
        background-color: #EEEEEE;
        padding: 10px 20px;
        border-radius: 10px;
        border: 1px solid #ccc;
        margin-bottom: 30px;
        text-align: center;
    '>
        <h4 style='color: #1a1a1a;'> üîç Key Insights from the Webinar Feedback </h4>
    """,
    unsafe_allow_html=True
)

# Insights Section CSS and Block
st.markdown("""
    <style>
    .insight-box {
        background-color: #fff9ec;
        border-left: 6px solid #f4a261;
        padding: 25px;
        margin-bottom: 40px;
        border-radius: 12px;
        box-shadow: 2px 2px 10px rgba(0,0,0,0.05);
    }
    .insight-title {
        font-size: 28px;
        font-weight: bold;
        color: #e76f51;
        margin-bottom: 20px;
        text-align: left;
    }
    .insight-text {
        font-size: 18px;
        color: #333333;
        line-height: 1.7;
        margin-bottom: 10px;
        padding-left: 10px;
        position: relative;
    }
    .insight-text::before {
        content: "‚û§";
        position: absolute;
        left: -18px;
        color: #2a9d8f;
        font-size: 16px;
    }
    </style>

    <div class='insight-box'>
        <div class='insight-text'>The average ratings across relevance, clarity, speaker effectiveness, and content quality all scored above 4.0, indicating strong overall satisfaction.</div>
        <div class='insight-text'>Over 90% of respondents stated they would recommend this webinar to others, reflecting positive word-of-mouth potential.</div>
        <div class='insight-text'>Participants highlighted terms like "practical", "real-world", and "clarity" as their most valuable takeaways, underscoring the strength of applied learning.</div>
        <div class='insight-text'>The majority of attendees are highly likely to attend future webinars from Zenthic AI, showing promise for community retention.</div>
        <div class='insight-text'>Suggestions for improvement included more case studies, real-time Q&A, and sharing resources post-session, all pointing to higher interactivity demand.</div>
        <div class='insight-text'>Topics requested for future webinars included AI in Healthcare, AI for Finance, Prompt Engineering, and Real-World Deployment.</div>
    </div>
""", unsafe_allow_html=True)
st.markdown("---")

# Ratings and Recommendation in two columns
col1, col2 = st.columns(2)

with col1:
    #st.subheader("üìä Overall Ratings Summary")
    st.markdown(
        """
        <div style='
            background-color: #EEEEEE;
            padding: 10px 20px;
            border-radius: 10px;
            border: 1px solid #ccc;
            margin-bottom: 30px;
            text-align: center;
        '>
            <h4 style='color: #1a1a1a;'> üìä Overall Ratings Summary </h4>
        """,
        unsafe_allow_html=True
    )
    rating_cols = [
        col for col in df.columns if 'Relevance' in col or 'Real-world' in col or 'Clarity' in col or 'Speaker' in col or 'Quality' in col
    ]
    fig, ax = plt.subplots(figsize=(8, 5))
    ratings_avg = df[rating_cols].mean()
    sns.barplot(x=ratings_avg.values, y=ratings_avg.index.str.extract(r'\n?\s*(.*)')[0], palette="coolwarm", ax=ax)
    ax.set_xlim(0, 5)
    ax.set_xlabel("Average Rating (out of 5)")
    ax.set_title("Average Scores by Category")
    st.pyplot(fig)

with col2:
    st.markdown(
        """
        <div style='
            background-color: #EEEEEE;
            padding: 10px 20px;
            border-radius: 10px;
            border: 1px solid #ccc;
            margin-bottom: 30px;
            text-align: center;
        '>
            <h4 style='color: #1a1a1a;'> üëç Would You Recommend This Webinar? </h4>
        """,
        unsafe_allow_html=True
    )
    #st.subheader("üëç Would You Recommend This Webinar?")
    recommend_counts = df['Would you recommend this webinar to others?'].value_counts()
    fig, ax = plt.subplots(figsize=(8, 5))
    sns.barplot(x=recommend_counts.values, y=recommend_counts.index, palette="Set2", ax=ax)
    ax.set_xlabel("Number of Responses")
    ax.set_ylabel("Recommendation")
    ax.set_title("Recommendation Summary")
    st.pyplot(fig)

st.markdown("---")

# Likelihood and Takeaway Frequency
col3, col4 = st.columns(2)

with col3:
    st.markdown(
        """
        <div style='
            background-color: #EEEEEE;
            padding: 10px 20px;
            border-radius: 10px;
            border: 1px solid #ccc;
            margin-bottom: 30px;
            text-align: center;
        '>
            <h4 style='color: #1a1a1a;'> üìÖ Likelihood of Attending Future Sessions </h4>
        """,
        unsafe_allow_html=True
    )
    #st.subheader("üìÖ Likelihood of Attending Future Sessions")
    # Find the correct column for likelihood using partial match
    likelihood_col = [col for col in df.columns if "attend future" in col.lower()]
    if likelihood_col:
        likelihood_counts = df[likelihood_col[0]].value_counts()
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.barplot(x=likelihood_counts.values, y=likelihood_counts.index, palette="pastel", ax=ax)
        ax.set_xlabel("Responses")
        ax.set_ylabel("Likelihood")
        ax.set_title("Future Attendance Likelihood")
        st.pyplot(fig)
    else:
        st.warning("‚ö†Ô∏è Couldn't find the column related to attendance likelihood.")
        fig, ax = plt.subplots(figsize=(8, 5))
        sns.barplot(x=likelihood_counts.values, y=likelihood_counts.index, palette="pastel", ax=ax)
        ax.set_xlabel("Responses")
        ax.set_ylabel("Likelihood")
        ax.set_title("Future Attendance Likelihood")
        st.pyplot(fig)

with col4:
    st.markdown(
        """
        <div style='
            background-color: #EEEEEE;
            padding: 10px 20px;
            border-radius: 10px;
            border: 1px solid #ccc;
            margin-bottom: 30px;
            text-align: center;
        '>
            <h4 style='color: #1a1a1a;'> üí° Most Valuable Takeaways (Keyword Frequency) </h4>
        """,
        unsafe_allow_html=True
    )
    #st.subheader("üí° Most Valuable Takeaways (Keyword Frequency)")
    # Find the correct column for valuable takeaways
    takeaway_col = [col for col in df.columns if "valuable part" in col.lower()]
    if takeaway_col:
        text_data = df[takeaway_col[0]].dropna().str.lower().str.cat(sep=' ')
        words = [word.strip('.,!?:;()[]') for word in text_data.split() if len(word) > 3]
        common_words = Counter(words).most_common(10)
        if common_words:
            keywords, freqs = zip(*common_words)
            fig, ax = plt.subplots(figsize=(8, 5))
            sns.barplot(x=list(freqs), y=list(keywords), ax=ax)
            ax.set_title("Top Keywords from Valuable Takeaways")        
            ax.set_xlabel("Frequency")        
            ax.set_ylabel("Keyword")        
            st.pyplot(fig)    
        else:
            st.info("No valuable takeaway keywords available.")
    else:
        st.warning("‚ö†Ô∏è Couldn't find the column with valuable takeaways")
st.markdown("---")

# Suggestions section
st.markdown(
    """
    <div style='
        background-color: #EEEEEE;
        padding: 10px 20px;
        border-radius: 10px;
        border: 1px solid #ccc;
        margin-bottom: 30px;
        text-align: center;
    '>
        <h4 style='color: #1a1a1a;'> üõ† Suggestions for Improvement </h4>
    """,
    unsafe_allow_html=True
)

# Suggestions section
suggestions_col = [col for col in df.columns if "suggestion" in col.lower()]
if suggestions_col:
    suggestions = df[suggestions_col[0]].dropna().unique()
    if len(suggestions):
        for s in suggestions:
            st.markdown(f"- {s}")
    else:
        st.info("No suggestions were submitted.")
else:
    st.warning("‚ö†Ô∏è Couldn't find the column for suggestions.")
st.markdown("---")

# Future topics section
st.markdown(
    """
    <div style='
        background-color: #EEEEEE;
        padding: 10px 20px;
        border-radius: 10px;
        border: 1px solid #ccc;
        margin-bottom: 30px;
        text-align: center;
    '>
        <h4 style='color: #1a1a1a;'> üìö Topics You Want in Future Webinars </h4>
    """,
    unsafe_allow_html=True
)
# Future topics section
topics_col = [col for col in df.columns if "topics" in col.lower() and "future" in col.lower()]
if topics_col:
    future_topics = df[topics_col[0]].dropna().unique()
    if len(future_topics):
        for topic in future_topics:
            st.markdown(f"- {topic}")
    else:
        st.info("No topics were suggested.")
else:
    st.warning("‚ö†Ô∏è Couldn't find the column for future webinar topics.")

# Footer
st.markdown("""
    <hr>
    <p style='text-align: center; color: gray;'>Zenthic AI ¬© 2025 | Powered by Streamlit</p>
""", unsafe_allow_html=True)
